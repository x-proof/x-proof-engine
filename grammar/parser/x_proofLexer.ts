// Generated from x_proof.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class x_proofLexer extends Lexer {
	public static readonly Identifier = 1;
	public static readonly Parameters = 2;
	public static readonly Object = 3;
	public static readonly Objects = 4;
	public static readonly AliasBody = 5;
	public static readonly Alias = 6;
	public static readonly StandalonePatternMatchingBody = 7;
	public static readonly StandalonePatternMatching = 8;
	public static readonly MultiplePatternMatchingBody = 9;
	public static readonly MultiplePatternMatching = 10;
	public static readonly PatternMatching = 11;
	public static readonly RuleBody = 12;
	public static readonly Rule = 13;
	public static readonly Definition = 14;
	public static readonly DefinitionClause = 15;
	public static readonly Axiom = 16;
	public static readonly AxiomClause = 17;
	public static readonly Theorem = 18;
	public static readonly TheoremClause = 19;
	public static readonly BlockComment = 20;
	public static readonly LineComment = 21;
	public static readonly Clause = 22;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [  ];
	public static readonly symbolicNames: (string | null)[] = [ null, "Identifier", 
                                                             "Parameters", 
                                                             "Object", "Objects", 
                                                             "AliasBody", 
                                                             "Alias", "StandalonePatternMatchingBody", 
                                                             "StandalonePatternMatching", 
                                                             "MultiplePatternMatchingBody", 
                                                             "MultiplePatternMatching", 
                                                             "PatternMatching", 
                                                             "RuleBody", 
                                                             "Rule", "Definition", 
                                                             "DefinitionClause", 
                                                             "Axiom", "AxiomClause", 
                                                             "Theorem", 
                                                             "TheoremClause", 
                                                             "BlockComment", 
                                                             "LineComment", 
                                                             "Clause" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"Nondigit", "Digit", "LeadingChars", "Identifier", "Parameters", "Object", 
		"Objects", "AliasBody", "Alias", "StandalonePatternMatchingBody", "StandalonePatternMatching", 
		"MultiplePatternMatchingBody", "MultiplePatternMatching", "PatternMatching", 
		"RuleBody", "Rule", "Definition", "DefinitionClause", "Axiom", "AxiomClause", 
		"Theorem", "TheoremClause", "BlockComment", "LineComment", "Clause",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, x_proofLexer._ATN, x_proofLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "x_proof.g4"; }

	public get literalNames(): (string | null)[] { return x_proofLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return x_proofLexer.symbolicNames; }
	public get ruleNames(): string[] { return x_proofLexer.ruleNames; }

	public get serializedATN(): number[] { return x_proofLexer._serializedATN; }

	public get channelNames(): string[] { return x_proofLexer.channelNames; }

	public get modeNames(): string[] { return x_proofLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,22,395,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,3,3,60,8,3,1,3,1,3,5,3,64,8,3,
	10,3,12,3,67,9,3,1,4,1,4,1,4,5,4,72,8,4,10,4,12,4,75,9,4,1,5,1,5,1,5,3,
	5,80,8,5,1,5,3,5,83,8,5,1,6,1,6,1,6,5,6,88,8,6,10,6,12,6,91,9,6,1,7,1,7,
	1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,106,8,8,10,8,12,8,109,9,
	8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
	5,10,126,8,10,10,10,12,10,129,9,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
	11,1,11,1,11,3,11,141,8,11,1,11,1,11,1,11,1,11,1,11,5,11,148,8,11,10,11,
	12,11,151,9,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
	12,1,12,1,12,5,12,167,8,12,10,12,12,12,170,9,12,1,12,1,12,1,12,1,13,1,13,
	3,13,177,8,13,1,14,1,14,1,14,3,14,182,8,14,1,15,1,15,1,15,1,16,1,16,1,16,
	3,16,190,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,
	16,203,8,16,10,16,12,16,206,9,16,1,16,3,16,209,8,16,3,16,211,8,16,1,17,
	1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,223,8,17,10,17,12,17,
	226,9,17,1,17,1,17,1,18,1,18,1,18,3,18,233,8,18,1,18,1,18,1,18,1,18,1,18,
	1,18,1,18,1,18,1,18,1,18,1,18,5,18,246,8,18,10,18,12,18,249,9,18,1,18,3,
	18,252,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
	1,18,5,18,267,8,18,10,18,12,18,270,9,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
	19,1,19,1,19,1,19,1,19,5,19,283,8,19,10,19,12,19,286,9,19,1,19,1,19,1,20,
	1,20,1,20,3,20,293,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
	20,1,20,5,20,306,8,20,10,20,12,20,309,9,20,1,20,3,20,312,8,20,1,20,1,20,
	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,327,8,20,10,
	20,12,20,330,9,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,341,
	8,20,10,20,12,20,344,9,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
	1,21,1,21,1,21,1,21,5,21,359,8,21,10,21,12,21,362,9,21,1,21,1,21,1,22,1,
	22,1,22,1,22,5,22,370,8,22,10,22,12,22,373,9,22,1,22,1,22,1,22,1,22,1,22,
	1,23,1,23,1,23,1,23,5,23,384,8,23,10,23,12,23,387,9,23,1,23,1,23,1,24,1,
	24,1,24,3,24,394,8,24,1,371,0,25,1,0,3,0,5,0,7,1,9,2,11,3,13,4,15,5,17,
	6,19,7,21,8,23,9,25,10,27,11,29,12,31,13,33,14,35,15,37,16,39,17,41,18,
	43,19,45,20,47,21,49,22,1,0,4,3,0,65,90,95,95,97,122,1,0,48,57,2,0,35,36,
	64,64,2,0,10,10,13,13,426,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
	0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
	25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
	0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
	47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,53,1,0,0,0,5,55,1,0,0,0,7,59,1,0,
	0,0,9,68,1,0,0,0,11,76,1,0,0,0,13,84,1,0,0,0,15,92,1,0,0,0,17,96,1,0,0,
	0,19,112,1,0,0,0,21,116,1,0,0,0,23,140,1,0,0,0,25,155,1,0,0,0,27,176,1,
	0,0,0,29,181,1,0,0,0,31,183,1,0,0,0,33,186,1,0,0,0,35,212,1,0,0,0,37,229,
	1,0,0,0,39,273,1,0,0,0,41,289,1,0,0,0,43,347,1,0,0,0,45,365,1,0,0,0,47,
	379,1,0,0,0,49,393,1,0,0,0,51,52,7,0,0,0,52,2,1,0,0,0,53,54,7,1,0,0,54,
	4,1,0,0,0,55,56,7,2,0,0,56,6,1,0,0,0,57,60,3,5,2,0,58,60,3,1,0,0,59,57,
	1,0,0,0,59,58,1,0,0,0,60,65,1,0,0,0,61,64,3,3,1,0,62,64,3,1,0,0,63,61,1,
	0,0,0,63,62,1,0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,8,1,0,
	0,0,67,65,1,0,0,0,68,73,3,7,3,0,69,70,5,44,0,0,70,72,3,7,3,0,71,69,1,0,
	0,0,72,75,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,10,1,0,0,0,75,73,1,0,0,
	0,76,82,3,7,3,0,77,79,5,40,0,0,78,80,3,13,6,0,79,78,1,0,0,0,79,80,1,0,0,
	0,80,81,1,0,0,0,81,83,5,41,0,0,82,77,1,0,0,0,82,83,1,0,0,0,83,12,1,0,0,
	0,84,89,3,11,5,0,85,86,5,44,0,0,86,88,3,11,5,0,87,85,1,0,0,0,88,91,1,0,
	0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,14,1,0,0,0,91,89,1,0,0,0,92,93,3,7,3,
	0,93,94,5,61,0,0,94,95,3,11,5,0,95,16,1,0,0,0,96,97,5,97,0,0,97,98,5,108,
	0,0,98,99,5,105,0,0,99,100,5,97,0,0,100,101,5,115,0,0,101,102,1,0,0,0,102,
	107,3,15,7,0,103,104,5,44,0,0,104,106,3,15,7,0,105,103,1,0,0,0,106,109,
	1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,110,1,0,0,0,109,107,1,0,0,0,
	110,111,5,59,0,0,111,18,1,0,0,0,112,113,3,11,5,0,113,114,5,61,0,0,114,115,
	3,11,5,0,115,20,1,0,0,0,116,117,5,109,0,0,117,118,5,97,0,0,118,119,5,116,
	0,0,119,120,5,99,0,0,120,121,5,104,0,0,121,122,1,0,0,0,122,127,3,19,9,0,
	123,124,5,44,0,0,124,126,3,21,10,0,125,123,1,0,0,0,126,129,1,0,0,0,127,
	125,1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,130,131,5,59,
	0,0,131,22,1,0,0,0,132,141,3,11,5,0,133,134,5,100,0,0,134,135,5,101,0,0,
	135,136,5,102,0,0,136,137,5,97,0,0,137,138,5,117,0,0,138,139,5,108,0,0,
	139,141,5,116,0,0,140,132,1,0,0,0,140,133,1,0,0,0,141,142,1,0,0,0,142,143,
	5,61,0,0,143,144,5,62,0,0,144,145,1,0,0,0,145,149,5,123,0,0,146,148,3,31,
	15,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,
	152,1,0,0,0,151,149,1,0,0,0,152,153,5,125,0,0,153,154,5,59,0,0,154,24,1,
	0,0,0,155,156,5,109,0,0,156,157,5,97,0,0,157,158,5,116,0,0,158,159,5,99,
	0,0,159,160,5,104,0,0,160,161,1,0,0,0,161,162,5,40,0,0,162,163,3,11,5,0,
	163,164,5,41,0,0,164,168,5,123,0,0,165,167,3,23,11,0,166,165,1,0,0,0,167,
	170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,
	0,0,171,172,5,125,0,0,172,173,5,59,0,0,173,26,1,0,0,0,174,177,3,21,10,0,
	175,177,3,25,12,0,176,174,1,0,0,0,176,175,1,0,0,0,177,28,1,0,0,0,178,182,
	3,11,5,0,179,182,3,27,13,0,180,182,3,17,8,0,181,178,1,0,0,0,181,179,1,0,
	0,0,181,180,1,0,0,0,182,30,1,0,0,0,183,184,3,29,14,0,184,185,5,59,0,0,185,
	32,1,0,0,0,186,210,3,7,3,0,187,189,5,40,0,0,188,190,3,9,4,0,189,188,1,0,
	0,0,189,190,1,0,0,0,190,191,1,0,0,0,191,208,5,41,0,0,192,193,5,99,0,0,193,
	194,5,111,0,0,194,195,5,110,0,0,195,196,5,102,0,0,196,197,5,111,0,0,197,
	198,5,114,0,0,198,199,5,109,0,0,199,200,1,0,0,0,200,204,5,123,0,0,201,203,
	3,31,15,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,
	0,205,207,1,0,0,0,206,204,1,0,0,0,207,209,5,125,0,0,208,192,1,0,0,0,208,
	209,1,0,0,0,209,211,1,0,0,0,210,187,1,0,0,0,210,211,1,0,0,0,211,34,1,0,
	0,0,212,213,5,100,0,0,213,214,5,101,0,0,214,215,5,102,0,0,215,216,5,105,
	0,0,216,217,5,110,0,0,217,218,5,101,0,0,218,219,1,0,0,0,219,224,3,33,16,
	0,220,221,5,44,0,0,221,223,3,33,16,0,222,220,1,0,0,0,223,226,1,0,0,0,224,
	222,1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,228,5,59,
	0,0,228,36,1,0,0,0,229,230,3,7,3,0,230,232,5,40,0,0,231,233,3,9,4,0,232,
	231,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,251,5,41,0,0,235,236,5,
	112,0,0,236,237,5,114,0,0,237,238,5,101,0,0,238,239,5,109,0,0,239,240,5,
	105,0,0,240,241,5,115,0,0,241,242,5,101,0,0,242,243,1,0,0,0,243,247,5,123,
	0,0,244,246,3,31,15,0,245,244,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,247,
	248,1,0,0,0,248,250,1,0,0,0,249,247,1,0,0,0,250,252,5,125,0,0,251,235,1,
	0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,254,5,99,0,0,254,255,5,111,0,
	0,255,256,5,110,0,0,256,257,5,99,0,0,257,258,5,108,0,0,258,259,5,117,0,
	0,259,260,5,115,0,0,260,261,5,105,0,0,261,262,5,111,0,0,262,263,5,110,0,
	0,263,264,1,0,0,0,264,268,5,123,0,0,265,267,3,31,15,0,266,265,1,0,0,0,267,
	270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,268,1,0,
	0,0,271,272,5,125,0,0,272,38,1,0,0,0,273,274,5,97,0,0,274,275,5,120,0,0,
	275,276,5,105,0,0,276,277,5,111,0,0,277,278,5,109,0,0,278,279,1,0,0,0,279,
	284,3,37,18,0,280,281,5,44,0,0,281,283,3,37,18,0,282,280,1,0,0,0,283,286,
	1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,
	287,288,5,59,0,0,288,40,1,0,0,0,289,290,3,7,3,0,290,292,5,40,0,0,291,293,
	3,9,4,0,292,291,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,311,5,41,0,
	0,295,296,5,112,0,0,296,297,5,114,0,0,297,298,5,101,0,0,298,299,5,109,0,
	0,299,300,5,105,0,0,300,301,5,115,0,0,301,302,5,101,0,0,302,303,1,0,0,0,
	303,307,5,123,0,0,304,306,3,31,15,0,305,304,1,0,0,0,306,309,1,0,0,0,307,
	305,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,307,1,0,0,0,310,312,5,125,
	0,0,311,295,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,5,99,0,0,314,
	315,5,111,0,0,315,316,5,110,0,0,316,317,5,99,0,0,317,318,5,108,0,0,318,
	319,5,117,0,0,319,320,5,115,0,0,320,321,5,105,0,0,321,322,5,111,0,0,322,
	323,5,110,0,0,323,324,1,0,0,0,324,328,5,123,0,0,325,327,3,31,15,0,326,325,
	1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,331,1,0,0,0,
	330,328,1,0,0,0,331,332,5,125,0,0,332,333,5,112,0,0,333,334,5,114,0,0,334,
	335,5,111,0,0,335,336,5,111,0,0,336,337,5,102,0,0,337,338,1,0,0,0,338,342,
	5,123,0,0,339,341,3,31,15,0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,1,0,
	0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,342,1,0,0,0,345,346,5,125,0,0,346,
	42,1,0,0,0,347,348,5,116,0,0,348,349,5,104,0,0,349,350,5,101,0,0,350,351,
	5,111,0,0,351,352,5,114,0,0,352,353,5,101,0,0,353,354,5,109,0,0,354,355,
	1,0,0,0,355,360,3,41,20,0,356,357,5,44,0,0,357,359,3,41,20,0,358,356,1,
	0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,363,1,0,0,0,362,
	360,1,0,0,0,363,364,5,59,0,0,364,44,1,0,0,0,365,366,5,47,0,0,366,367,5,
	42,0,0,367,371,1,0,0,0,368,370,9,0,0,0,369,368,1,0,0,0,370,373,1,0,0,0,
	371,372,1,0,0,0,371,369,1,0,0,0,372,374,1,0,0,0,373,371,1,0,0,0,374,375,
	5,42,0,0,375,376,5,47,0,0,376,377,1,0,0,0,377,378,6,22,0,0,378,46,1,0,0,
	0,379,380,5,47,0,0,380,381,5,47,0,0,381,385,1,0,0,0,382,384,8,3,0,0,383,
	382,1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,1,0,
	0,0,387,385,1,0,0,0,388,389,6,23,0,0,389,48,1,0,0,0,390,394,3,35,17,0,391,
	394,3,39,19,0,392,394,3,43,21,0,393,390,1,0,0,0,393,391,1,0,0,0,393,392,
	1,0,0,0,394,50,1,0,0,0,34,0,59,63,65,73,79,82,89,107,127,140,149,168,176,
	181,189,204,208,210,224,232,247,251,268,284,292,307,311,328,342,360,371,
	385,393,1,0,1,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!x_proofLexer.__ATN) {
			x_proofLexer.__ATN = new ATNDeserializer().deserialize(x_proofLexer._serializedATN);
		}

		return x_proofLexer.__ATN;
	}


	static DecisionsToDFA = x_proofLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}